services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        SECRET_KEY: ${SECRET_KEY}
        DB_PASSWORD: ${DB_PASSWORD}
    command: gunicorn --bind 0.0.0.0:8000 --pythonpath /app/thedev thedev.wsgi:application
    restart: unless-stopped
    env_file:
      - .env
    environment: # Add these environment variables
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=thedev.settings
      - SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https
      - SECURE_SSL_REDIRECT=1

    volumes:
      - static_volume:/app/static
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15
    container_name: postgres_prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --noninteractive --agree-tos -d thedev.com.br --email ${USER_EMAIL} --keep-until-expiring
    depends_on:
      - nginx
    env_file: .env

  nginx:
    build: ./nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/static
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - web
      - certbot
    command: |
      /bin/sh -c '
      if [ ! -f /etc/letsencrypt/live/thedev.com.br/fullchain.pem ]; then
        echo "No SSL certificate found. Starting in HTTP mode..."
        nginx -g "daemon off;"
      else
        echo "SSL certificate found. Starting in HTTPS mode..."
        while :; do
          sleep 6h
          nginx -s reload
        done & nginx -g "daemon off;"
      fi'

volumes:
  postgres_data_prod:
  static_volume: